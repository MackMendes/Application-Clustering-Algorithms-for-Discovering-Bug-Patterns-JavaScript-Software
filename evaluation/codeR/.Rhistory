dsResultComplet[n,"Epsilon_identify"] <- iEps
# =====
# Charles
resultClustering_Charles <- dbscan::optics(db_charles,  eps = iEps, minPts = jMinpts)
resultClustering_Charles <- extractDBSCAN(resultClustering_Charles, eps_cl = iEps)
dsResultComplet[n,"TotalCluster_Charles"] <- max(resultClustering_Charles$cluster)
dsResultComplet[n,"TotalOutliers_Charles"] <-
length(resultClustering_Charles$cluster[resultClustering_Charles$cluster == 0])
jaccard_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Charles"] <- jaccard_Charles
rand_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Charles"] <- rand_Charles
# =====
# Hanam
resultClustering_Hanam <- dbscan::optics(db_hanam,  eps = iEps, minPts = jMinpts)
resultClustering_Hanam <- extractDBSCAN(resultClustering_Hanam, eps_cl = iEps)
dsResultComplet[n,"TotalCluster_Hanam"] <- max(resultClustering_Hanam$cluster)
dsResultComplet[n,"TotalOutliers_Hanam"] <-
length(resultClustering_Hanam$cluster[resultClustering_Hanam$cluster == 0])
jaccard_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Hanam"] <- jaccard_Hanam
rand_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Hanam"] <- rand_Hanam
dsResultComplet[n,"dirf_Charles_Vs_Hanam"] <- jaccard_Charles == jaccard_Hanam && rand_Charles == rand_Hanam
n <- n + 1;
}
}
write.csv(x = dsResultComplet, file="evaluation/evaluation-optics-charles-VS-Hanam.csv")
# ============================================================
# EVALUATION - Optics
# ============================================================
# Realiza a clusterização das característas obtidas na Mineração de códigos no GitHub
# ===========
setwd("G:/Mestrado/Meus experimentos/BugAID-Modificado/MeusResultados/W - Métricas de Clusters/codeR")
# ===========
# Leitura de CSV (apenas com 31 comits)
dataset.charles <- read.csv(file="datasets/dataset_bugid_31commits_charles.csv", header=TRUE, sep=",")
dataset.hanam <- read.csv(file="datasets/dataset_bugid_31commits_hanam.csv", header=TRUE, sep=",")
# ===========
# Retirando os metadados do DataSet (deixar somente os BCTs)
# ===========
db_charles <- dataset.charles[11:ncol(dataset.charles)]
db_hanam <- dataset.hanam[11:ncol(dataset.hanam)]
# ===========
# Carregando as bibliotecas
# ===========
if(!require(clusteval)) install.packages("clusteval")
library("clusteval")
if(!require(dbscan)) install.packages("dbscan")
library("dbscan")
if(!require(data.table)) install.packages("data.table")
library(data.table)
# ===========
# Evaluation
# ===========
rangeEpsilon <- seq(0.1, 6.3, by=0.2)
rangeMinPts <- seq(2, 20, by=1)
dsResultComplet <- data.frame()
jaccard_Charles <- double()
jaccard_Hanam <- double()
rand_Charles <- double()
rand_Hanam <- double()
resultClustering_Charles <- list()
resultClustering_Hanam <- list()
n <- 1
# Resultados esperados
resultExpected <- c(5,5,5,5,5,6,8,6,6,6,6,6,6,8,6,6,6,7,7,7,6,7,8,6,6,6)
for (iEps in rangeEpsilon) {
for (jMinpts in rangeMinPts) {
dsResultComplet[n,"ID"] <- n
dsResultComplet[n,"Epsilon"] <- iEps
dsResultComplet[n,"MinPts"] <- jMinpts
dsResultComplet[n,"Epsilon_identify"] <- iEps
# =====
# Charles
resultClustering_Charles <- dbscan::optics(db_charles,  eps = iEps, minPts = jMinpts)
resultClustering_Charles <- extractDBSCAN(resultClustering_Charles, eps_cl = iEps)
dsResultComplet[n,"TotalCluster_Charles"] <- max(resultClustering_Charles$cluster)
dsResultComplet[n,"TotalOutliers_Charles"] <-
length(resultClustering_Charles$cluster[resultClustering_Charles$cluster == 0])
jaccard_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Charles"] <- jaccard_Charles
rand_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Charles"] <- rand_Charles
# =====
# Hanam
resultClustering_Hanam <- dbscan::optics(db_hanam,  eps = iEps, minPts = jMinpts)
resultClustering_Hanam <- extractDBSCAN(resultClustering_Hanam, eps_cl = iEps)
dsResultComplet[n,"TotalCluster_Hanam"] <- max(resultClustering_Hanam$cluster)
dsResultComplet[n,"TotalOutliers_Hanam"] <-
length(resultClustering_Hanam$cluster[resultClustering_Hanam$cluster == 0])
jaccard_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Hanam"] <- jaccard_Hanam
rand_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Hanam"] <- rand_Hanam
dsResultComplet[n,"Has_Result_Diff"] <- !(jaccard_Charles == jaccard_Hanam && rand_Charles == rand_Hanam)
n <- n + 1;
}
}
write.csv(x = dsResultComplet, file="evaluation/evaluation-optics-charles-VS-Hanam.csv")
source("model/KMeansClustering.R")
source("model/KMeansClustering.R")
?kmeans
setwd("G:/Mestrado/Meus experimentos/BugAID-Modificado/MeusResultados/W - Métricas de Clusters/codeR")
# ===========
# Leitura de CSV (apenas com 31 comits)
dataset.charles <- read.csv(file="datasets/dataset_bugid_31commits_charles.csv", header=TRUE, sep=",")
dataset.hanam <- read.csv(file="datasets/dataset_bugid_31commits_hanam.csv", header=TRUE, sep=",")
# ===========
# Retirando os metadados do DataSet (deixar somente os BCTs)
# ===========
db_charles <- dataset.charles[11:ncol(dataset.charles)]
db_hanam <- dataset.hanam[11:ncol(dataset.hanam)]
# ===========
# Carregando as bibliotecas
# ===========
if(!require(clusteval)) install.packages("clusteval")
library("clusteval")
if(!require(dbscan)) install.packages("dbscan")
library("dbscan")
# ===========
# Evaluation
# ===========
rangeMinPts <- seq(2, 20, by=1)
dsResultComplet <- data.frame()
jaccard_Charles <- double()
jaccard_Hanam <- double()
rand_Charles <- double()
rand_Hanam <- double()
resultClustering_Charles <- list()
resultClustering_Hanam <- list()
n <- 1
# Resultados esperados
resultExpected <- c(5,5,5,5,5,6,8,6,6,6,6,6,6,8,6,6,6,7,7,7,6,7,8,6,6,6)
for (jMinpts in rangeMinPts) {
dsResultComplet[n,"ID"] <- n
dsResultComplet[n,"MinPts"] <- jMinpts
# =====
# Charles
resultClustering_Charles <- dbscan::hdbscan(db_charles, minPts = jMinpts)
dsResultComplet[n,"Method_HDBScan_Charles"] <- resultClustering_Charles$hc$method
dsResultComplet[n,"Dist_Method_HDBScan_Charles"] <- resultClustering_Charles$hc$dist.method
dsResultComplet[n,"TotalCluster_Charles"] <- max(resultClustering_Charles$cluster)
dsResultComplet[n,"TotalOutliers_Charles"] <-
length(resultClustering_Charles$cluster[resultClustering_Charles$cluster == 0])
jaccard_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Charles"] <- jaccard_Charles
rand_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Charles"] <- rand_Charles
# =====
# Hanam
resultClustering_Hanam <- dbscan::hdbscan(db_hanam, minPts = jMinpts)
dsResultComplet[n,"TotalCluster_Hanam"] <- max(resultClustering_Hanam$cluster)
dsResultComplet[n,"Method_HDBScan_Hanam"] <- resultClustering_Hanam$hc$method
dsResultComplet[n,"Dist_Method_HDBScan_Hanam"] <- resultClustering_Hanam$hc$dist.method
dsResultComplet[n,"TotalOutliers_Hanam"] <-
length(resultClustering_Hanam$cluster[resultClustering_Hanam$cluster == 0])
jaccard_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Hanam"] <- jaccard_Hanam
rand_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Hanam"] <- rand_Hanam
dsResultComplet[n,"Has_Result_Diff"] <- !(jaccard_Charles == jaccard_Hanam && rand_Charles == rand_Hanam)
n <- n + 1;
}
3/2
as.integer(3/2)
ncol(db_hanam)
as.integer(ncol(db_hanam)/2)
setwd("G:/Mestrado/Meus experimentos/BugAID-Modificado/MeusResultados/W - Métricas de Clusters/codeR")
# ===========
# Leitura de CSV (apenas com 31 comits)
dataset.charles <- read.csv(file="datasets/dataset_bugid_31commits_charles.csv", header=TRUE, sep=",")
dataset.hanam <- read.csv(file="datasets/dataset_bugid_31commits_hanam.csv", header=TRUE, sep=",")
# ===========
# Retirando os metadados do DataSet (deixar somente os BCTs)
# ===========
db_charles <- dataset.charles[11:ncol(dataset.charles)]
db_hanam <- dataset.hanam[11:ncol(dataset.hanam)]
# ===========
# Carregando as bibliotecas
# ===========
if(!require(clusteval)) install.packages("clusteval")
library("clusteval")
# ===========
# Evaluation
# ===========
rangeCenters <- seq(2, as.integer(ncol(db_hanam)/2), by=1)
dsResultComplet <- data.frame()
jaccard_Charles <- double()
jaccard_Hanam <- double()
rand_Charles <- double()
rand_Hanam <- double()
resultClustering_Charles <- list()
resultClustering_Hanam <- list()
n <- 1
# Resultados esperados
resultExpected <- c(5,5,5,5,5,6,8,6,6,6,6,6,6,8,6,6,6,7,7,7,6,7,8,6,6,6)
iCenters <- 2
dsResultComplet[n,"ID"] <- n
dsResultComplet[n,"Centers"] <- iCenters
# =====
# Charles
resultClustering_Charles <- kmeans(x = db_charles,  centers= iCenters)
resultClustering_Charles
resultClustering_Charles$centers
resultClustering_Charles$totss
resultClustering_Charles$withinss
resultClustering_Charles$tot.withinss
resultClustering_Charles$betweenss
resultClustering_Charles$size
resultClustering_Charles$iter
resultClustering_Charles$ifault
max(resultClustering_Charles$cluster)
# ============================================================
# EVALUATION - K-means (Clássico)
# ============================================================
# Realiza a clusterização das característas obtidas na Mineração de códigos no GitHub
# ===========
setwd("G:/Mestrado/Meus experimentos/BugAID-Modificado/MeusResultados/W - Métricas de Clusters/codeR")
# ===========
# Leitura de CSV (apenas com 31 comits)
dataset.charles <- read.csv(file="datasets/dataset_bugid_31commits_charles.csv", header=TRUE, sep=",")
dataset.hanam <- read.csv(file="datasets/dataset_bugid_31commits_hanam.csv", header=TRUE, sep=",")
# ===========
# Retirando os metadados do DataSet (deixar somente os BCTs)
# ===========
db_charles <- dataset.charles[11:ncol(dataset.charles)]
db_hanam <- dataset.hanam[11:ncol(dataset.hanam)]
# ===========
# Carregando as bibliotecas
# ===========
if(!require(clusteval)) install.packages("clusteval")
library("clusteval")
# ===========
# Evaluation
# ===========
rangeCenters <- seq(2, as.integer(ncol(db_hanam)/2), by=1)
dsResultComplet <- data.frame()
jaccard_Charles <- double()
jaccard_Hanam <- double()
rand_Charles <- double()
rand_Hanam <- double()
resultClustering_Charles <- list()
resultClustering_Hanam <- list()
n <- 1
# Resultados esperados
resultExpected <- c(5,5,5,5,5,6,8,6,6,6,6,6,6,8,6,6,6,7,7,7,6,7,8,6,6,6)
for (iCenters in rangeCenters) {
dsResultComplet[n,"ID"] <- n
dsResultComplet[n,"Centers"] <- iCenters
# =====
# Charles
resultClustering_Charles <- kmeans(x = db_charles,  centers= iCenters)
dsResultComplet[n,"TotalCluster_Charles"] <- max(resultClustering_Charles$cluster)
dsResultComplet[n,"TotalSumSquares_Charles"] <- resultClustering_Charles$totss
dsResultComplet[n,"TotalwithinClusterSumSquares_Charles"] <- resultClustering_Charles$tot.withinss
dsResultComplet[n,"TotalBetweenClusterSumSquares_Charles"] <- resultClustering_Charles$betweenss
dsResultComplet[n,"Iterations_Charles"] <- resultClustering_Charles$iter
dsResultComplet[n,"FaultInAlgorithm_Charles"] <- resultClustering_Charles$ifault
jaccard_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Charles"] <- jaccard_Charles
rand_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Charles"] <- rand_Charles
# =====
# Hanam
resultClustering_Hanam <- kmeans(x = db_hanam,  centers= iCenters)
dsResultComplet[n,"TotalCluster_Hanam"] <- max(resultClustering_Hanam$cluster)
dsResultComplet[n,"TotalSumSquares_Hanam"] <- resultClustering_Hanam$totss
dsResultComplet[n,"TotalwithinClusterSumSquares_Hanam"] <- resultClustering_Hanam$tot.withinss
dsResultComplet[n,"TotalBetweenClusterSumSquares_Hanam"] <- resultClustering_Hanam$betweenss
dsResultComplet[n,"Iterations_Hanam"] <- resultClustering_Hanam$iter
dsResultComplet[n,"FaultInAlgorithm_Hanam"] <- resultClustering_Hanam$ifault
jaccard_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Hanam"] <- jaccard_Hanam
rand_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Hanam"] <- rand_Hanam
dsResultComplet[n,"Has_Result_Diff"] <- !(jaccard_Charles == jaccard_Hanam && rand_Charles == rand_Hanam)
n <- n + 1;
}
write.csv(x = dsResultComplet, file="evaluation/evaluation-kmeans-charles-VS-Hanam.csv")
??fcm
?fcm
??inaparc
??´inaparc´
?´inaparc´
if(!require(e1071)) install.packages("e1071")
library(e1071)
setwd("G:/Mestrado/Meus experimentos/BugAID-Modificado/MeusResultados/W - Métricas de Clusters/codeR")
# ===========
# Leitura de CSV (apenas com 31 comits)
dataset.charles <- read.csv(file="datasets/dataset_bugid_31commits_charles.csv", header=TRUE, sep=",")
dataset.hanam <- read.csv(file="datasets/dataset_bugid_31commits_hanam.csv", header=TRUE, sep=",")
# ===========
# Retirando os metadados do DataSet (deixar somente os BCTs)
# ===========
db_charles <- dataset.charles[11:ncol(dataset.charles)]
db_hanam <- dataset.hanam[11:ncol(dataset.hanam)]
# ===========
# Carregando as bibliotecas
# ===========
if(!require(clusteval)) install.packages("clusteval")
library("clusteval")
if(!require(e1071)) install.packages("e1071")
library(e1071)
# ===========
# Evaluation
# ===========
rangeCenters <- seq(2, as.integer(ncol(db_hanam)/2), by=1)
dsResultComplet <- data.frame()
jaccard_Charles <- double()
jaccard_Hanam <- double()
rand_Charles <- double()
rand_Hanam <- double()
resultClustering_Charles <- list()
resultClustering_Hanam <- list()
n <- 1
?cmeans
iCenters <- 2
resultClustering_Charles <- e1071::cmeans(x = db_charles,  centers= iCenters)
View(resultClustering_Charles)
resultClustering_Charles$iter
dists <- c("euclidean", "manhattan")
for (jDist in dists) {
print(jDist)
}
jDist <- "euclidean"
resultClustering_Charles <- e1071::cmeans(x = db_charles,  centers= iCenters,
iter.max = 100,  method = "cmeans", dist = jDist)
resultClustering_Charles
resultClustering_Charles$size
resultClustering_Charles$membership
resultClustering_Charles$iter
resultClustering_Charles$withinerror
resultClustering_Charles$call
resultClustering_Charles$cluster
?kmeans
resultClustering_Charles
# ============================================================
# EVALUATION - K-means (Clássico)
# ============================================================
# Realiza a clusterização das característas obtidas na Mineração de códigos no GitHub
# ===========
setwd("G:/Mestrado/Meus experimentos/BugAID-Modificado/MeusResultados/W - Métricas de Clusters/codeR")
# ===========
# Leitura de CSV (apenas com 31 comits)
dataset.charles <- read.csv(file="datasets/dataset_bugid_31commits_charles.csv", header=TRUE, sep=",")
dataset.hanam <- read.csv(file="datasets/dataset_bugid_31commits_hanam.csv", header=TRUE, sep=",")
# ===========
# Retirando os metadados do DataSet (deixar somente os BCTs)
# ===========
db_charles <- dataset.charles[11:ncol(dataset.charles)]
db_hanam <- dataset.hanam[11:ncol(dataset.hanam)]
# ===========
# Carregando as bibliotecas
# ===========
if(!require(clusteval)) install.packages("clusteval")
library("clusteval")
# ===========
# Evaluation
# ===========
rangeCenters <- seq(2, as.integer(ncol(db_hanam)/2), by=1)
dsResultComplet <- data.frame()
jaccard_Charles <- double()
jaccard_Hanam <- double()
rand_Charles <- double()
rand_Hanam <- double()
resultClustering_Charles <- list()
resultClustering_Hanam <- list()
nCountTest <- 10 # Quantidade de testes
n <- 1
# Resultados esperados
resultExpected <- c(5,5,5,5,5,6,8,6,6,6,6,6,6,8,6,6,6,7,7,7,6,7,8,6,6,6)
for (ncount in 1:nCountTest) {
for (iCenters in rangeCenters) {
dsResultComplet[n,"ID"] <- n
dsResultComplet[n,"Centers"] <- iCenters
dsResultComplet[n,"NumbTest"] <- ncount
# =====
# Charles
resultClustering_Charles <- kmeans(x = db_charles,  centers= iCenters)
dsResultComplet[n,"TotalCluster_Charles"] <- max(resultClustering_Charles$cluster)
dsResultComplet[n,"TotalSumSquares_Charles"] <- resultClustering_Charles$totss
dsResultComplet[n,"TotalwithinClusterSumSquares_Charles"] <- resultClustering_Charles$tot.withinss
dsResultComplet[n,"TotalBetweenClusterSumSquares_Charles"] <- resultClustering_Charles$betweenss
dsResultComplet[n,"Iterations_Charles"] <- resultClustering_Charles$iter
dsResultComplet[n,"FaultInAlgorithm_Charles"] <- resultClustering_Charles$ifault
jaccard_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Charles"] <- jaccard_Charles
rand_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Charles"] <- rand_Charles
# =====
# Hanam
resultClustering_Hanam <- kmeans(x = db_hanam,  centers= iCenters)
dsResultComplet[n,"TotalCluster_Hanam"] <- max(resultClustering_Hanam$cluster)
dsResultComplet[n,"TotalSumSquares_Hanam"] <- resultClustering_Hanam$totss
dsResultComplet[n,"TotalwithinClusterSumSquares_Hanam"] <- resultClustering_Hanam$tot.withinss
dsResultComplet[n,"TotalBetweenClusterSumSquares_Hanam"] <- resultClustering_Hanam$betweenss
dsResultComplet[n,"Iterations_Hanam"] <- resultClustering_Hanam$iter
dsResultComplet[n,"FaultInAlgorithm_Hanam"] <- resultClustering_Hanam$ifault
jaccard_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Hanam"] <- jaccard_Hanam
rand_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Hanam"] <- rand_Hanam
dsResultComplet[n,"Has_Result_Diff"] <- !(jaccard_Charles == jaccard_Hanam && rand_Charles == rand_Hanam)
n <- n + 1;
}
}
write.csv(x = dsResultComplet, file="evaluation/evaluation-kmeans-charles-VS-Hanam.csv")
# ============================================================
# EVALUATION - C-means Fazzy
# Reference: http://www.sthda.com/english/articles/30-advanced-clustering/103-cmeans-r-function-compute-fuzzy-clustering/
# ============================================================
# Realiza a clusterização das característas obtidas na Mineração de códigos no GitHub
# ===========
setwd("G:/Mestrado/Meus experimentos/BugAID-Modificado/MeusResultados/W - Métricas de Clusters/codeR")
# ===========
# Leitura de CSV (apenas com 31 comits)
dataset.charles <- read.csv(file="datasets/dataset_bugid_31commits_charles.csv", header=TRUE, sep=",")
dataset.hanam <- read.csv(file="datasets/dataset_bugid_31commits_hanam.csv", header=TRUE, sep=",")
# ===========
# Retirando os metadados do DataSet (deixar somente os BCTs)
# ===========
db_charles <- dataset.charles[11:ncol(dataset.charles)]
db_hanam <- dataset.hanam[11:ncol(dataset.hanam)]
# ===========
# Carregando as bibliotecas
# ===========
if(!require(clusteval)) install.packages("clusteval")
library("clusteval")
if(!require(e1071)) install.packages("e1071")
library(e1071)
# ===========
# Evaluation
# ===========
rangeCenters <- seq(2, as.integer(ncol(db_hanam)/2), by=1)
dsResultComplet <- data.frame()
jaccard_Charles <- double()
jaccard_Hanam <- double()
rand_Charles <- double()
rand_Hanam <- double()
resultClustering_Charles <- list()
resultClustering_Hanam <- list()
nCountTest <- 10 # Quantidade de testes
n <- 1
dists <- c("euclidean", "manhattan")
# Resultados esperados
resultExpected <- c(5,5,5,5,5,6,8,6,6,6,6,6,6,8,6,6,6,7,7,7,6,7,8,6,6,6)
for (ncount in 1:nCountTest) {
for (jDist in dists) {
for (iCenters in rangeCenters) {
dsResultComplet[n,"ID"] <- n
dsResultComplet[n,"Centers"] <- iCenters
dsResultComplet[n,"NumbTest"] <- ncount
# =====
# Charles
resultClustering_Charles <- e1071::cmeans(x = db_charles,  centers= iCenters,
iter.max = 100,  method = "cmeans", dist = jDist)
dsResultComplet[n,"TotalCluster_Charles"] <- max(resultClustering_Charles$cluster)
dsResultComplet[n,"Iterations_Charles"] <- resultClustering_Charles$iter
dsResultComplet[n,"ValueObjectiveFunction_Charles"] <- resultClustering_Charles$withinerror
jaccard_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Charles"] <- jaccard_Charles
rand_Charles <-
cluster_similarity(resultClustering_Charles$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Charles"] <- rand_Charles
# =====
# Hanam
resultClustering_Hanam <- e1071::cmeans(x = db_hanam,  centers= iCenters,
iter.max = 100,  method = "cmeans", dist = jDist)
dsResultComplet[n,"TotalCluster_Hanam"] <- max(resultClustering_Hanam$cluster)
dsResultComplet[n,"Iterations_Hanam"] <- resultClustering_Hanam$iter
dsResultComplet[n,"ValueObjectiveFunction_Hanam"] <- resultClustering_Hanam$withinerror
jaccard_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "jaccard", method = "independence")
dsResultComplet[n,"Jaccard_Hanam"] <- jaccard_Hanam
rand_Hanam <-
cluster_similarity(resultClustering_Hanam$cluster, resultExpected, similarity = "rand", method = "independence")
dsResultComplet[n,"Rand_Hanam"] <- rand_Hanam
dsResultComplet[n,"Has_Result_Diff"] <- !(jaccard_Charles == jaccard_Hanam && rand_Charles == rand_Hanam)
n <- n + 1;
}
}
}
write.csv(x = dsResultComplet, file="evaluation/evaluation-cmeansFazzy-charles-VS-Hanam.csv")
?e1071::cmeans
iris_matrix <- as.matrix(iris[, -5])
kNNdistplot(iris_matrix, k=4)
abline(h=0.4, col="red")
View(iris_matrix)
kNNdistplot(db_charles, k=3)
abline(h=0.3, col="red")
